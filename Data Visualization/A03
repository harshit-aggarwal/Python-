{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96856919",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Part A\n",
    "\n",
    "\n",
    "# Import relevant libraries \n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Read data\n",
    "data = pd.read_csv('cigarette.csv')\n",
    "\n",
    "# Group data by state and add all different prices to get highest\n",
    "g = data.groupby('state')['price'].sum().reset_index()\n",
    "\n",
    "# Get the top 5 states by sorting and arranging descendingly picking the top 5 elements\n",
    "top_5 = g.sort_values(by = ['price'], ascending=False).head(5)\n",
    "\n",
    "# Using the top 5 most expensive states filter original data to get all different prices available\n",
    "filtered_data = data[data['state'].isin(top_5['state'])] \n",
    "  \n",
    "# Plot a boxplot to show the average price per packet of cigarettes across all years    \n",
    "plt.figure(figsize=(12,10))\n",
    "plot = sns.boxplot(x = filtered_data['state'],y = filtered_data['price'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2bc27a28",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task B\n",
    "\n",
    "# Import relevant libraries \n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import datetime\n",
    "\n",
    "# Set the 2 countries for which we will plot the graph\n",
    "country1 = \"Albania\"\n",
    "country2 = \"Israel\"\n",
    "\n",
    "# Read the data and convert the datetime into proper format for manipulation\n",
    "data = pd.read_csv('pandemic.csv')\n",
    "data['ds'] = pd.to_datetime(data['ds'], format=\"%d-%m-%y\", exact=False)\n",
    "\n",
    "# Filter all data for country1 we want to plot\n",
    "df_country1 = data[data['location'] == country1]\n",
    "\n",
    "# Plot the line graph using hue to differentiate between different type of data_types\n",
    "fig, ax = plt.subplots(figsize = (15, 7))\n",
    "sns.lineplot(data=df_country1, x=\"ds\", y=\"value\", hue=\"data_type\")\n",
    "\n",
    "# Add labels and titles\n",
    "plt.xlabel('Months')\n",
    "plt.ylabel('Covid cases (Deaths, cases and Recovered)')\n",
    "plt.title('Condition of COVID-19 cases in ' + country1)\n",
    "plt.show()\n",
    "\n",
    "# Filter all data for country2 we want to plot\n",
    "df_country2 = data[data['location'] == country2]\n",
    "\n",
    "# Plot the line graph using hue to differentiate between different type of data_types\n",
    "fig, ax = plt.subplots(figsize = (15, 7))\n",
    "sns.lineplot(data=df_country2, x=\"ds\", y=\"value\", hue=\"data_type\")\n",
    "\n",
    "# Add labels and titles\n",
    "plt.xlabel('Months')\n",
    "plt.ylabel('Covid cases (Deaths, cases and Recovered)')\n",
    "plt.title('Condition of COVID-19 cases in ' + country2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49f535a9",
   "metadata": {},
   "source": [
    "# Part C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3baf4e0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import relevant libraries \n",
    "import pandas as pd\n",
    "\n",
    "# Read the data \n",
    "data = pd.read_csv('Nobel Prize.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed6a8528",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 1\n",
    "\n",
    "# Group by birth country and sum the prize column to get prize count by country\n",
    "g = data.groupby('Birth Country')['Prize'].count().reset_index()\n",
    "\n",
    "# Sort the values descending and get the top 10 values\n",
    "top_10 = g.sort_values(by = ['Prize'], ascending=False).head(10)\n",
    "\n",
    "# Print the top 10 countries by prizes won\n",
    "top_10\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f69e3d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 2\n",
    "\n",
    "# Filter the data to get all winners which identify as Female\n",
    "female_winners = data[data['Sex'] == \"Female\"]\n",
    "\n",
    "# Sort the data using Year, sorting ascendingly to get the earliest winner on top\n",
    "first_winner = female_winners.sort_values(by = ['Year'], ascending=True).head(1)\n",
    "\n",
    "# Print the name of the first female winner\n",
    "print(\"The first female to win the Noble prize was\" ,first_winner['Full Name'].values[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1468c0c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 3\n",
    "\n",
    "# Import relevant libraries\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Using crosstab calculate the number of female and male winners across each category\n",
    "df = pd.crosstab(index=data['Category'], columns=data['Sex'])\n",
    "\n",
    "# Print the table containing these values\n",
    "print(df)\n",
    "\n",
    "# Make a stacked bar plot to show the winners by gender across all categories\n",
    "ax = df.plot(kind='bar', stacked=True)\n",
    "ax.legend(title='gender', loc='best')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e54197b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 4\n",
    "\n",
    "# Group by Organization Name and sum the prize column to get prize count by country\n",
    "g = data.groupby('Organization Name')['Prize'].count().reset_index()\n",
    "\n",
    "# Sort the values descending and get the top 10 values\n",
    "top_25 = g.sort_values(by = ['Prize'], ascending=False).head(25)\n",
    "\n",
    "# Print the top 25 universities/organizations with number of prizes won\n",
    "top_25\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70f28a22",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 5\n",
    "\n",
    "# Import relevant libraries\n",
    "import seaborn as sns\n",
    "\n",
    "# Group prize winners by Laureate Type to see if more individual or group winners exists\n",
    "g = data.groupby('Laureate Type')['Prize'].count().reset_index()\n",
    "\n",
    "# Plot the data to show number of prize winners by Laureate Type\n",
    "sns.barplot(x='Laureate Type', y='Prize', data=g)\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9051acfe",
   "metadata": {},
   "source": [
    "# Part D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfcc2336",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import relevant libraries\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "\n",
    "# Read the data from csv\n",
    "data = pd.read_csv(\"df.csv\")\n",
    "\n",
    "# A list containing columns which we want to add from the data\n",
    "group_ID = ['Confirmed','Recovered']\n",
    "\n",
    "# Group the data by country and add the confirmed and recovered cases\n",
    "world = data.groupby('Country_Region')[group_ID].sum().reset_index()\n",
    "\n",
    "# Sort the data descendingly and grab top 5 values to get the country with most confirmed cases\n",
    "top_5 = world.sort_values(by = ['Confirmed'], ascending=False).head(5)\n",
    "\n",
    "# Plot the data using barplot\n",
    "fig, ax = plt.subplots(figsize = (15, 7))\n",
    "plot = sns.barplot(x = top_5['Confirmed'],y = top_5['Country_Region'], color='r', label='Confirmed')\n",
    "plot = sns.barplot(x = top_5['Recovered'],y = top_5['Country_Region'], color='g', label='Recovered')\n",
    "\n",
    "# Add the axis label\n",
    "plt.ylabel('Country')\n",
    "\n",
    "# Add the data labels\n",
    "for i,(value,name) in enumerate(zip(top_5['Confirmed'],top_5['Country_Region'])):\n",
    "    plot.text(value,i-0.05,f'{value:,.0f}', size = 12)\n",
    "\n",
    "for i,(value,name) in enumerate(zip(top_5['Recovered'],top_5['Country_Region'])):\n",
    "    plot.text(value,i-0.05,f'{value:,.0f}', size = 12)\n",
    "\n",
    "# Show the legened\n",
    "ax.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
